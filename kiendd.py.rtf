{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red24\green24\blue24;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c12157\c12157\c12157;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs19\fsmilli9750 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import PyPDF2\
import google.generativeai as genai\
import json\
import os\
\
# --- C\uc0\u7845 u h\'ecnh GenAI API ---\
# Thay th\uc0\u7871  "YOUR_GEMINI_API_KEY" b\u7857 ng API Key th\u7921 c c\u7911 a b\u7841 n\
# T\uc0\u7889 t nh\u7845 t n\'ean l\u432 u API key trong bi\u7871 n m\'f4i tr\u432 \u7901 ng\
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")\
if not GEMINI_API_KEY:\
    raise ValueError("GEMINI_API_KEY environment variable not set.")\
genai.configure(api_key=GEMINI_API_KEY)\
\
# Ch\uc0\u7885 n model ph\'f9 h\u7907 p (v\'ed d\u7909 : gemini-pro cho v\u259 n b\u7843 n)\
model = genai.GenerativeModel('gemini-pro')\
\
def extract_text_from_pdf(pdf_path):\
    """\
    Tr\'edch xu\uc0\u7845 t to\'e0n b\u7897  v\u259 n b\u7843 n t\u7915  m\u7897 t file PDF.\
    """\
    text = ""\
    try:\
        with open(pdf_path, 'rb') as file:\
            reader = PyPDF2.PdfReader(file)\
            for page_num in range(len(reader.pages)):\
                page = reader.pages[page_num]\
                text += page.extract_text() or "" # extract_text c\'f3 th\uc0\u7875  tr\u7843  v\u7873  None\
    except Exception as e:\
        print(f"L\uc0\u7895 i khi \u273 \u7885 c PDF: \{e\}")\
        return None\
    return text\
\
def parse_resume_with_genai(resume_text):\
    """\
    G\uc0\u7917 i v\u259 n b\u7843 n CV \u273 \u7871 n GenAI API \u273 \u7875  tr\'edch xu\u7845 t th\'f4ng tin.\
    """\
    if not resume_text:\
        return \{"error": "Kh\'f4ng c\'f3 v\uc0\u259 n b\u7843 n \u273 \u7875  x\u7917  l\'fd t\u7915  CV."\}\
\
    # Prompt Engineering: H\uc0\u432 \u7899 ng d\u7851 n model tr\'edch xu\u7845 t th\'f4ng tin v\'e0 \u273 \u7883 nh d\u7841 ng JSON\
    prompt = f"""\
    B\uc0\u7841 n l\'e0 m\u7897 t tr\u7907  l\'fd ph\'e2n t\'edch CV chuy\'ean nghi\u7879 p. H\'e3y tr\'edch xu\u7845 t c\'e1c th\'f4ng tin sau t\u7915  CV \u273 \u432 \u7907 c cung c\u7845 p:\
    - T\'ean \uc0\u273 \u7847 y \u273 \u7911  c\u7911 a \u7913 ng vi\'ean\
    - Th\'f4ng tin li\'ean h\uc0\u7879 : email, s\u7889  \u273 i\u7879 n tho\u7841 i\
    - C\'e1c m\uc0\u7909 c h\u7885 c v\u7845 n: b\u7857 ng c\u7845 p, t\'ean tr\u432 \u7901 ng/t\u7893  ch\u7913 c, th\u7901 i gian h\u7885 c\
    - Danh s\'e1ch c\'e1c k\uc0\u7929  n\u259 ng\
    - C\'e1c m\uc0\u7909 c kinh nghi\u7879 m l\'e0m vi\u7879 c: t\'ean c\'f4ng ty, v\u7883  tr\'ed/vai tr\'f2, th\u7901 i gian l\'e0m vi\u7879 c\
\
    Vui l\'f2ng tr\uc0\u7843  v\u7873  k\u7871 t qu\u7843  d\u432 \u7899 i \u273 \u7883 nh d\u7841 ng JSON sau:\
\
    ```json\
    \{\{\
      "candidate_name": "T\'ean \uc0\u7913 ng vi\'ean",\
      "contact_details": \{\{\
        "email": "email@example.com",\
        "phone": "+84 123 456 789"\
      \}\},\
      "education": [\
        \{\{\
          "degree": "B\uc0\u7857 ng c\u7845 p",\
          "institution": "T\'ean tr\uc0\u432 \u7901 ng",\
          "dates": "Th\uc0\u7901 i gian h\u7885 c"\
        \}\}\
      ],\
      "skills": [\
        "K\uc0\u7929  n\u259 ng 1",\
        "K\uc0\u7929  n\u259 ng 2"\
      ],\
      "work_experience": [\
        \{\{\
          "company": "T\'ean c\'f4ng ty",\
          "role": "V\uc0\u7883  tr\'ed",\
          "dates": "Th\uc0\u7901 i gian l\'e0m vi\u7879 c"\
        \}\}\
      ]\
    \}\}\
    ```\
\
    \uc0\u272 \'e2y l\'e0 v\u259 n b\u7843 n CV:\
    ---\
    \{resume_text\}\
    ---\
    """\
\
    try:\
        response = model.generate_content(prompt)\
        # Gemini th\uc0\u432 \u7901 ng tr\u7843  v\u7873  markdown code block, c\u7847 n tr\'edch xu\u7845 t ph\u7847 n JSON\
        response_text = response.text.strip()\
        \
        # T\'ecm v\'e0 tr\'edch xu\uc0\u7845 t chu\u7895 i JSON gi\u7919 a c\'e1c d\u7845 u ```json v\'e0 ```\
        start_idx = response_text.find("```json")\
        end_idx = response_text.rfind("```")\
        \
        if start_idx != -1 and end_idx != -1 and start_idx < end_idx:\
            json_str = response_text[start_idx + len("```json"):end_idx].strip()\
        else:\
            # N\uc0\u7871 u kh\'f4ng t\'ecm th\u7845 y markdown, th\u7917  ph\'e2n t\'edch tr\u7921 c ti\u7871 p\
            json_str = response_text\
\
        # Chuy\uc0\u7875 n chu\u7895 i JSON th\'e0nh dictionary\
        parsed_data = json.loads(json_str)\
        return parsed_data\
    except json.JSONDecodeError as e:\
        print(f"L\uc0\u7895 i khi ph\'e2n t\'edch JSON t\u7915  ph\u7843 n h\u7891 i GenAI: \{e\}")\
        print(f"Ph\uc0\u7843 n h\u7891 i th\'f4: \\n\{response.text\}")\
        return \{"error": "Kh\'f4ng th\uc0\u7875  ph\'e2n t\'edch ph\u7843 n h\u7891 i GenAI th\'e0nh JSON."\}\
    except Exception as e:\
        print(f"L\uc0\u7895 i khi g\u7885 i GenAI API: \{e\}")\
        return \{"error": f"L\uc0\u7895 i GenAI API: \{e\}"\}\
\
# --- H\'e0m ch\'ednh ---\
if __name__ == "__main__":\
    pdf_file_path = "example_cv.pdf" # \uc0\u272 \u7863 t t\'ean file CV c\u7911 a b\u7841 n \u7903  \u273 \'e2y\
\
    # B\uc0\u432 \u7899 c 1: Tr\'edch xu\u7845 t v\u259 n b\u7843 n t\u7915  PDF\
    cv_text = extract_text_from_pdf(pdf_file_path)\
\
    if cv_text:\
        print("\uc0\u272 \'e3 tr\'edch xu\u7845 t v\u259 n b\u7843 n t\u7915  CV. \u272 ang g\u7917 i \u273 \u7871 n GenAI \u273 \u7875  ph\'e2n t\'edch...")\
        # B\uc0\u432 \u7899 c 2: G\u7885 i GenAI API \u273 \u7875  ph\'e2n t\'edch\
        extracted_data = parse_resume_with_genai(cv_text)\
\
        # B\uc0\u432 \u7899 c 3: In k\u7871 t qu\u7843 \
        if "error" in extracted_data:\
            print(f"C\'f3 l\uc0\u7895 i x\u7843 y ra: \{extracted_data['error']\}")\
        else:\
            print("\\n--- K\uc0\u7871 t qu\u7843  Tr\'edch xu\u7845 t CV ---")\
            print(json.dumps(extracted_data, indent=2, ensure_ascii=False)) # ensure_ascii=False \uc0\u273 \u7875  hi\u7875 n th\u7883  ti\u7871 ng Vi\u7879 t\
            print("\\n--- K\uc0\u7871 t qu\u7843  n\'e0y s\u7861 n s\'e0ng cho x\u7917  l\'fd ti\u7871 p theo ---")\
    else:\
        print(f"Kh\'f4ng th\uc0\u7875  \u273 \u7885 c ho\u7863 c tr\'edch xu\u7845 t v\u259 n b\u7843 n t\u7915  file PDF: \{pdf_file_path\}")}